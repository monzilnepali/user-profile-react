{"version":3,"sources":["assets/defaultUser.svg","components/Header.js","components/ListItem.js","components/ProfileDetail.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Component","ListItem","props","state","isImgLoaded","imgUrl","DefaultUserImg","img","Image","onload","setState","src","onClick","this","clickHandler","alt","name","ProfileDetail","userName","data","address","getAddress","contact","getContact","imageUrl","console","log","window","scrollY","country","city","streetAddress","email","phone","style","top","handler","Object","keys","map","key","index","Search","type","placeholder","value","searchData","onChange","App","profileClickHandler","id","overlayStatus","activeUserId","overlayCloseHandler","searchInputChangeHandler","event","target","filterData","arr","filter","toLowerCase","includes","list","fetch","then","response","json","length","firstName","lastName","profileImage","getInfoById","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.875c6610.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultUser.7a21cbe9.svg\";","import React, {Component} from 'react';\r\nimport '../styles/header.css'\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className='nav-bar'>\r\n                <h1>People</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport '../styles/listItem.css'\r\nimport DefaultUserImg from '../assets/defaultUser.svg'\r\nclass ListItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isImgLoaded:false,\r\n            imgUrl:DefaultUserImg\r\n        };\r\n        this.img=new Image();\r\n        this.img.onload=()=>{\r\n            this.setState({\r\n                isImgLoaded:true,\r\n                imgUrl:this.props.img\r\n            });\r\n        };\r\n        this.img.src=props.img;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"card\" onClick={this.props.clickHandler}>\r\n                {this.state.isImgLoaded?<img src={this.state.imgUrl}  alt=\"\"/>:<img src={this.state.imgUrl}  alt=\"\"/>}\r\n                    <p className=\"user-name\">{this.props.name}</p>\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListItem;","import React, {Component} from 'react';\r\nimport  '../styles/profileDetail.css'\r\nclass ProfileDetail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.userName=props.data['firstName']+\" \"+ props.data['lastName'];\r\n        this.address=this.getAddress(props.data);\r\n        this.contact=this.getContact(props.data);\r\n        this.imageUrl=this.props.data['profileImage'];\r\n        console.log(\"scroll y\"+window.scrollY)\r\n    }\r\n    getAddress({ address: {country,city,state,streetAddress} }){\r\n        return {country,city,state,streetAddress};\r\n    }\r\n    getContact({ email,phone }){\r\n        return {email,phone}\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"overlay-container\" style={{top:window.scrollY}}>\r\n                <div className=\"overlay-wrapper\">\r\n                    <div className=\"overlay-header\">\r\n                        <h2>{this.userName}</h2>\r\n                        <div className=\"close-btn\" onClick={this.props.handler}>X</div>\r\n                    </div>\r\n                    <div className=\"overlay-imgContainer\">\r\n                        <img className=\"bg-image\" src={this.imageUrl} alt=\"\"/>\r\n                        <img className=\"profile-image\" src={this.imageUrl} alt=\"\"/>\r\n                        <div className=\"profile-username\">\r\n                            <p>{this.props.data['firstName']+\" \"+this.props.data['lastName']}\r\n                            </p>\r\n                            </div>\r\n                    </div>\r\n                    <div className=\"overlay-profileInfo\">\r\n                        <div className=\"overlay-body-left\">\r\n                            <p className=\"overlay-header\">Address</p>\r\n                            {Object.keys(this.address).map((key,index)=>\r\n                                    <div className=\"info-item\" key={key}>\r\n                                    <div className=\"label\">{key+\":\"}</div>\r\n                                    <div className=\"data\">{this.address[key]}</div>\r\n                            </div>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"overlay-body-right\">\r\n                            <p className=\"overlay-header\">Contact</p>\r\n                            {Object.keys(this.contact).map((key,index)=>\r\n                                <div className=\"info-item\" key={key}>\r\n                                    <div className=\"label\">{key+\":\"}</div>\r\n                                    <div className=\"data\">{this.contact[key]}</div>\r\n                                </div>\r\n                            )}\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileDetail;","import React, {Component} from 'react';\r\nimport '../styles/search.css'\r\nclass Search extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <input className=\"search-field\" type=\"text\" placeholder=\"Search here\" value={this.props.searchData} onChange={this.props.handler}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport './styles/App.css';\nimport Header from \"./components/Header\";\nimport ListItem from \"./components/ListItem\";\nimport ProfileDetail from \"./components/ProfileDetail\";\nimport Search from \"./components/Search\";\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            overlayStatus:false,\n            activeUserId:null,\n            searchData:\"\",\n            list:[]\n        }\n    }\n    componentDidMount() {\n        fetch(\"https://mock-io.herokuapp.com/users\")\n            .then(response=>response.json())\n            .then(data=>{\n                this.setState({\n                    list:data\n                });\n            });\n    }\n    profileClickHandler=(id)=>{\n        console.log(id);\n        this.setState({\n            overlayStatus:true,\n            activeUserId:id\n        })\n    };\n    overlayCloseHandler=()=>{\n        this.setState({\n            overlayStatus:false,\n            activeUserId:null\n        })\n    };\n    getInfoById(){\n        return this.state.list.filter((data) => {\n            if (data.id === this.state.activeUserId) {\n                console.log(data);\n                    return data;\n            }\n        })\n    }\n    searchInputChangeHandler=(event)=>{\n        console.log(event.target.value);\n        this.setState({\n            searchData:event.target.value\n        })\n    };\n    filterData=(arr=[],searchData=\"\")=>arr.filter((data)=>{\n        if(data['firstName'].toLowerCase().includes(searchData.toLowerCase())){\n            return data;\n        }\n\n    });\n\n    render() {\n    return (\n        <div className=\"main-container\">\n          <Header/>\n          <div className=\"body-container\">\n              <Search searchData={this.state.searchData} handler={this.searchInputChangeHandler}/>\n          <div className=\"card-container\">\n              { this.state.list.length!==0?this.filterData(this.state.list,this.state.searchData).map(({ id,firstName,lastName,profileImage })=> <ListItem clickHandler={()=>this.profileClickHandler(id)} key={id} name={firstName+lastName} img={profileImage} /> ):<div className=\"loading-ui-container\"/>}\n          </div>\n          </div>\n            { this.state.overlayStatus?<ProfileDetail data={this.getInfoById()[0]} handler={this.overlayCloseHandler}/>:null}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Header.js","components/ListItem.js","components/ProfileDetail.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","ListItem","onClick","this","props","clickHandler","src","img","alt","name","ProfileDetail","userName","data","address","getAddress","contact","getContact","imageUrl","console","log","window","scrollY","country","city","state","streetAddress","email","phone","style","top","handler","Object","keys","map","key","index","Search","type","placeholder","value","searchData","onChange","App","profileClickHandler","id","setState","overlayStatus","activeUserId","overlayCloseHandler","searchInputChangeHandler","event","target","filterData","arr","filter","toLowerCase","includes","list","fetch","then","response","json","length","firstName","lastName","profileImage","getInfoById","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31aa079a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport '../styles/header.css'\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className='nav-bar'>\r\n                <h1>People</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport '../styles/listItem.css'\r\nclass ListItem extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card\" onClick={this.props.clickHandler}>\r\n                <img src={this.props.img} alt=\"\"/>\r\n                <p className=\"user-name\">{this.props.name}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListItem;","import React, {Component} from 'react';\r\nimport  '../styles/profileDetail.css'\r\nclass ProfileDetail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.userName=props.data['firstName']+\" \"+ props.data['lastName'];\r\n        this.address=this.getAddress(props.data);\r\n        this.contact=this.getContact(props.data);\r\n        this.imageUrl=this.props.data['profileImage'];\r\n        console.log(\"scroll y\"+window.scrollY)\r\n    }\r\n    getAddress({ address: {country,city,state,streetAddress} }){\r\n        return {country,city,state,streetAddress};\r\n    }\r\n    getContact({ email,phone }){\r\n        return {email,phone}\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"overlay-container\" style={{top:window.scrollY}}>\r\n                <div className=\"overlay-wrapper\">\r\n                    <div className=\"overlay-header\">\r\n                        <h2>{this.userName}</h2>\r\n                        <div className=\"close-btn\" onClick={this.props.handler}>X</div>\r\n                    </div>\r\n                    <div className=\"overlay-imgContainer\">\r\n                        <img className=\"bg-image\" src={this.imageUrl} alt=\"\"/>\r\n                        <img className=\"profile-image\" src={this.imageUrl} alt=\"\"/>\r\n                        <div className=\"profile-username\">\r\n                            <p>{this.props.data['firstName']+\" \"+this.props.data['lastName']}\r\n                            </p>\r\n                            </div>\r\n                    </div>\r\n                    <div className=\"overlay-profileInfo\">\r\n                        <div className=\"overlay-body-left\">\r\n                            <h2>Address</h2>\r\n                            {Object.keys(this.address).map((key,index)=>\r\n                                    <div className=\"info-item\" key={key}>\r\n                                    <div className=\"label\">{key+\":\"}</div>\r\n                                    <div className=\"data\">{this.address[key]}</div>\r\n                            </div>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"overlay-body-right\">\r\n                            <h2>Contact</h2>\r\n                            {Object.keys(this.contact).map((key,index)=>\r\n                                <div className=\"info-item\" key={key}>\r\n                                    <div className=\"label\">{key+\":\"}</div>\r\n                                    <div className=\"data\">{this.contact[key]}</div>\r\n                                </div>\r\n                            )}\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileDetail;","import React, {Component} from 'react';\r\nimport '../styles/search.css'\r\nclass Search extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <input className=\"search-field\" type=\"text\" placeholder=\"Search here\" value={this.props.searchData} onChange={this.props.handler}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport './styles/App.css';\nimport Header from \"./components/Header\";\nimport ListItem from \"./components/ListItem\";\nimport ProfileDetail from \"./components/ProfileDetail\";\nimport Search from \"./components/Search\";\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            overlayStatus:false,\n            activeUserId:null,\n            searchData:\"\",\n            list:[]\n        }\n    }\n    componentDidMount() {\n        fetch(\"https://mock-io.herokuapp.com/users\")\n            .then(response=>response.json())\n            .then(data=>{\n                this.setState({\n                    list:data\n                });\n            });\n    }\n    profileClickHandler=(id)=>{\n        console.log(id);\n        this.setState({\n            overlayStatus:true,\n            activeUserId:id\n        })\n    };\n    overlayCloseHandler=()=>{\n        this.setState({\n            overlayStatus:false,\n            activeUserId:null\n        })\n    };\n    getInfoById(){\n        return this.state.list.filter((data) => {\n            if (data.id === this.state.activeUserId) {\n                console.log(data);\n                    return data;\n            }\n        })\n    }\n    searchInputChangeHandler=(event)=>{\n        console.log(event.target.value);\n        this.setState({\n            searchData:event.target.value\n        })\n    };\n    filterData=(arr=[],searchData=\"\")=>arr.filter((data)=>{\n        if(data['firstName'].toLowerCase().includes(searchData.toLowerCase())){\n            return data;\n        }\n\n    });\n\n    render() {\n    return (\n        <div className=\"main-container\">\n          <Header/>\n          <div className=\"body-container\">\n              <Search searchData={this.state.searchData} handler={this.searchInputChangeHandler}/>\n          <div className=\"card-container\">\n              { this.state.list.length!==0?this.filterData(this.state.list,this.state.searchData).map(({ id,firstName,lastName,profileImage })=> <ListItem clickHandler={()=>this.profileClickHandler(id)} key={id} name={firstName+lastName} img={profileImage} /> ):<p>loading..</p>}\n          </div>\n          </div>\n            { this.state.overlayStatus?<ProfileDetail data={this.getInfoById()[0]} handler={this.overlayCloseHandler}/>:null}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}